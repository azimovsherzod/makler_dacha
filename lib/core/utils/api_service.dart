import 'dart:convert';

import '../../../../constans/imports.dart';

class ApiService {
  final Dio dio = Dio(BaseOptions(
    baseUrl: baseUrl,
    connectTimeout: const Duration(seconds: 30),
    receiveTimeout: const Duration(seconds: 30),
    followRedirects: false, // Yo'naltirishni o'chirish
    validateStatus: (status) {
      return status != null &&
          status < 500; // 500 dan past status kodlarni qabul qilish
    },
    headers: {
      'Content-Type': 'application/json',
    },
  ));

  ApiService() {
    // Tokenni avtomatik qo'shish uchun interceptor
    dio.interceptors.add(InterceptorsWrapper(
      onRequest: (options, handler) {
        final token = Hive.box('profileBox').get('access_token');
        if (token != null) {
          options.headers['Authorization'] = 'Bearer $token';
        }
        return handler.next(options);
      },
      onError: (DioError e, handler) {
        if (e.response?.statusCode == 401) {
          // Token muddati tugagan bo'lsa, foydalanuvchini logout qilish
          Get.snackbar(
            "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
            "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç–µ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.",
            backgroundColor: Colors.red,
          );
        }
        return handler.next(e);
      },
    ));
  }

  Future<dynamic> makeGetRequest(String url,
      {Map<String, dynamic>? queryParameters}) async {
    try {
      print("üì° GET $url");
      if (queryParameters != null) {
        print("üì¶ Query Parameters: $queryParameters");
      }

      final response = await dio.get(
        url,
        queryParameters: queryParameters, // Query parametersni qo'shish
      );

      // Log javob
      print("‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.statusCode}");
      print("‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${response.data}");

      // JSONni to'g'ri aylantirish
      if (response.data is Map) {
        return Map<String, dynamic>.from(
            response.data); // To'g'ri turga aylantirish
      } else if (response.data is List) {
        return List<dynamic>.from(response.data);
      } else {
        print("‚ö†Ô∏è Noma'lum formatdagi javob: ${response.data}");
        return response.data;
      }
    } on DioError catch (e) {
      _handleError(e, "GET", url);
      return null;
    }
  }

  Future<dynamic> makePostRequest(String url,
      {Map<String, dynamic>? data}) async {
    try {
      print("üì° POST $url");
      print("üì¶ Ma'lumotlar: $data");

      final response = await dio.post(url, data: data);

      // Log javob
      print("‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.statusCode}");
      print("‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${response.data}");

      // JSONni to'g'ri aylantirish
      if (response.data is Map) {
        return Map<String, dynamic>.from(response.data);
      } else if (response.data is List) {
        return List<dynamic>.from(response.data);
      } else {
        print("‚ö†Ô∏è Noma'lum formatdagi javob: ${response.data}");
        return response.data;
      }
    } on DioError catch (e) {
      _handleError(e, "POST", url);
      return null;
    }
  }

  Future<void> saveUserIdFromToken() async {
    try {
      final box = Hive.box('profileBox');
      final token = box.get('access_token');

      if (token == null) {
        print("‚ö†Ô∏è Token mavjud emas!");
        return;
      }

      // Tokenni dekodlash
      final parts = token.split('.');
      if (parts.length != 3) {
        throw Exception("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞");
      }

      final payload =
          utf8.decode(base64Url.decode(base64Url.normalize(parts[1])));
      final Map<String, dynamic> decodedToken = json.decode(payload);

      // user_id ni olish
      final userId = decodedToken['user_id'];
      if (userId == null) {
        print("‚ùå Token ichida user_id mavjud emas!");
        return;
      }

      // user_id ni saqlash
      box.put('user_id', userId);
      print("‚úÖ user_id saqlandi: $userId");
    } catch (e) {
      print("‚ùå saveUserIdFromToken() xatosi: $e");
    }
  }

  Future<dynamic> makePutRequest(String url,
      {Map<String, dynamic>? data}) async {
    try {
      print("üì° PUT $url");
      print("üì¶ Ma'lumotlar: $data");

      final response = await dio.put(url, data: data);

      // Log javob
      print("‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.statusCode}");
      print("‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${response.data}");

      // JSONni to'g'ri aylantirish
      if (response.data is Map) {
        return Map<String, dynamic>.from(response.data);
      } else if (response.data is List) {
        return List<dynamic>.from(response.data);
      } else {
        print("‚ö†Ô∏è Noma'lum formatdagi javob: ${response.data}");
        return response.data;
      }
    } on DioError catch (e) {
      _handleError(e, "PUT", url);
      return null;
    }
  }

  Future<dynamic> makeDeleteRequest(String url) async {
    try {
      // To'liq URLni chop etish
      print("üì° DELETE ${dio.options.baseUrl}$url");

      final response = await dio.delete(url);

      // Log javob
      print("‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.statusCode}");
      print("‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${response.data}");

      return response.data;
    } on DioException catch (e) {
      print("‚ùå –û—à–∏–±–∫–∞ (DELETE ${e.response?.statusCode}): $url");
      print("‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: ${e.response?.data}");
      return null;
    }
  }

  void _handleError(DioException e, String method, String endpoint) {
    if (e.response != null) {
      print("‚ùå –û—à–∏–±–∫–∞ ($method ${e.response!.statusCode}): $endpoint");
      print("‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: ${e.response!.data}");
      if (e.response!.statusCode == 301) {
        print("‚ö†Ô∏è Yo'naltirish xatosi: $endpoint");
        Get.snackbar(
          "–û—à–∏–±–∫–∞",
          "Yo'naltirish xatosi: $endpoint",
          backgroundColor: Colors.orange,
        );
      } else {
        Get.snackbar(
          "–û—à–∏–±–∫–∞",
          "–û—à–∏–±–∫–∞ $method-–∑–∞–ø—Ä–æ—Å–∞: ${e.response!.statusCode}",
          backgroundColor: Colors.red,
        );
      }
    } else {
      print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ $method-–∑–∞–ø—Ä–æ—Å–µ: $e");
      Get.snackbar(
        "–û—à–∏–±–∫–∞",
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ $method-–∑–∞–ø—Ä–æ—Å–µ",
        backgroundColor: Colors.red,
      );
    }
  }
}
